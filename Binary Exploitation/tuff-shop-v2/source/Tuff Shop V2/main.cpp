#include <iostream>
#include <string.h>
using namespace std;

int aura = 67;
void flag(){
  FILE *fp = fopen("flag.txt", "r");
  if (fp == NULL) {
    cout << "Error opening flag file\n";
    return;
  }
  char flag[64];
  fgets(flag, sizeof(flag), fp);
  fclose(fp);
  cout << flag << endl;
}

class Item {
  public:
    Item() {
      name[0] = '\0';
      price = 200;
    }
    Item(const char* name, int price) {
      strcpy(this->name, name);
      this->price = price;
    }
    char name[64];
    int price;

    void editName(){
      char newName[64];
      cout << "Enter new item name: ";
      cin >> newName;
      strcpy(this->name, newName);
    }

    void viewItem(){
      cout << "Item Name: " << name << endl;
      cout << "Item Price: " << price << endl;
    }

    void buyItem(){
      if (aura >= price) {
        aura -= price;
        cout << "[Debug] reading flag" << endl;
        flag();
      } else {
        cout << "Not enough aura to buy this item.\n";
      }
    }
};

Item* items[10] = {nullptr};

void menu(int aura){
  printf("\nTuff Admin Console V2\n"
         "Balance of account: %d\n"
         "Select action:\n"
         "1. Add Item\n"
         "2. Edit Item\n"
         "3. View Item\n"
         "4. Test Buy Item\n"
         "0. nothing\n"
         "> ", aura);
}

void add(){
  int idx = 0;
  while (idx < 10 && items[idx] != nullptr) {
    idx++;
  }
  if (idx == 10) {
    printf("Inventory full\n");
    return;
  }
  char name[64];
  int price;
  cout << "Enter item name: ";
  cin >> name;
  name[63] = '\0';
  price = rand() % 100 + 100;
  cout << "Randomizing price to: " << price << endl;
  items[idx] = new Item(name, price);
}

void edit(){
  int idx;
  cout << "Enter item index to edit: ";
  cin >> idx;
  if (idx < 0 || idx >= 10 || items[idx] == nullptr) {
    printf("Invalid item index\n");
    return;
  }
  items[idx]->editName();
}

void view(){
  int idx;
  cout << "Enter item index to view: ";
  cin >> idx;
  if (idx < 0 || idx >= 10 || items[idx] == nullptr) {
    printf("Invalid item index\n");
    return;
  }
  items[idx]->viewItem();
}

void testBuy(){
  int idx;
  cout << "Enter item index to buy: ";
  cin >> idx;
  if (idx < 0 || idx >= 10 || items[idx] == nullptr) {
    printf("Invalid item index\n");
    return;
  }
  items[idx]->buyItem();
}

void cleanup(){
  for (int i = 0; i < 10; ++i) {
    if (items[i] != nullptr) {
      delete items[i];
      items[i] = nullptr;
    }
  }
}

int main(){
  setbuf(stdin, NULL);
  setbuf(stdout, NULL);
  setbuf(stderr, NULL);
  srand(time(0));

  for (;;){
    menu(aura);
    int choice;
    cin >> choice;
    switch (choice) {
      case 1:
        add();
        break;
      case 2:
        edit();
        break;
      case 3:
        view();
        break;
      case 4:
        testBuy();
        break;
      case 0:
        cout << "Exiting...\n";
        cleanup();
        return 0;
      default:
        cout << "Invalid choice\n";
    }
  }
}